import java.util.Calendar;

// здесь смотрите, вы верно добавили поле, но сетить его надо иначе.
// То есть мы переопределяем метод пополнения и в нем устанавливаем дату
// пополнения (можно как Date хранить). Далее в методе снятия мы проверяем,
// что дата пополнения + 1 месяц ДО текущей даты.


/// Павел, спасибо, кажется разобрался. Поправьте, если не правильно!)
/// Мы переопределяем метод с помощью @Override указателя, но при этом стараемся использовать логику
/// родительского класса по максимуму. При этом, переопределением метода
/// как бы оттягиваем очередность обращения к методу который
/// переопределили в качестве первого по стеку вызова заместо родительского метода
/// при этом используя далее ролительский метод в переопределенном.
//// Т.е. по сути =  @Override - переопределяет стэк вызова относительно родительского,
//// а через параметр super = мы обращаемся в родительскому методу
public class DepositAccount extends BankAccount {

    Calendar lastIncome = Calendar.getInstance();

    @Override
    public void put(double amountToPut) {
        if (amountToPut > 0) {
            super.put(amountToPut);
            lastIncome.add(Calendar.MONTH, 1);
        }
    }

    @Override
    public void take(double amountToTake) {
        if (Calendar.getInstance().after(lastIncome)) {
            super.take(amountToTake);
        } else {
            System.out.println("Нельзя снимать деньги в течении 1 месяца после последнего пополнения!");
        }
    }
}

